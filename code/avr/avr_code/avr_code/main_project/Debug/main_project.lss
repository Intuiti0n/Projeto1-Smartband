
main_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001558  000015ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800126  00800126  00001612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b91  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a07  00000000  00000000  000094e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a51  00000000  00000000  0000aeec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a4  00000000  00000000  0000c940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002053  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f49  00000000  00000000  0000f237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_18>
      4c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	37 07       	cpc	r19, r23

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 e5       	ldi	r30, 0x58	; 88
      d8:	f5 e1       	ldi	r31, 0x15	; 21
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a6 32       	cpi	r26, 0x26	; 38
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	a6 e2       	ldi	r26, 0x26	; 38
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	aa 32       	cpi	r26, 0x2A	; 42
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 65 07 	call	0xeca	; 0xeca <main>
     110:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z10filterloopv>:
  return outputValue;
}
*/

signed long long int filterloop()
{
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	2c 97       	sbiw	r28, 0x0c	; 12
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	xv[0] = xv[1]; xv[1] = xv[2]; xv[2] = xv[3]; xv[3] = xv[4];
     144:	40 90 74 01 	lds	r4, 0x0174	; 0x800174 <_ZL2xv+0x4>
     148:	50 90 75 01 	lds	r5, 0x0175	; 0x800175 <_ZL2xv+0x5>
     14c:	60 90 76 01 	lds	r6, 0x0176	; 0x800176 <_ZL2xv+0x6>
     150:	70 90 77 01 	lds	r7, 0x0177	; 0x800177 <_ZL2xv+0x7>
     154:	a0 e7       	ldi	r26, 0x70	; 112
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	4d 92       	st	X+, r4
     15a:	5d 92       	st	X+, r5
     15c:	6d 92       	st	X+, r6
     15e:	7c 92       	st	X, r7
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_ZL2xv+0x8>
     166:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <_ZL2xv+0x9>
     16a:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <_ZL2xv+0xa>
     16e:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <_ZL2xv+0xb>
     172:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <_ZL2xv+0x4>
     176:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <_ZL2xv+0x5>
     17a:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <_ZL2xv+0x6>
     17e:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <_ZL2xv+0x7>
     182:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <_ZL2xv+0xc>
     186:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <_ZL2xv+0xd>
     18a:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <_ZL2xv+0xe>
     18e:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <_ZL2xv+0xf>
     192:	c0 92 78 01 	sts	0x0178, r12	; 0x800178 <_ZL2xv+0x8>
     196:	d0 92 79 01 	sts	0x0179, r13	; 0x800179 <_ZL2xv+0x9>
     19a:	e0 92 7a 01 	sts	0x017A, r14	; 0x80017a <_ZL2xv+0xa>
     19e:	f0 92 7b 01 	sts	0x017B, r15	; 0x80017b <_ZL2xv+0xb>
     1a2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL2xv+0x10>
     1a6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZL2xv+0x11>
     1aa:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <_ZL2xv+0x12>
     1ae:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <_ZL2xv+0x13>
     1b2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_ZL2xv+0xc>
     1b6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_ZL2xv+0xd>
     1ba:	a0 93 7e 01 	sts	0x017E, r26	; 0x80017e <_ZL2xv+0xe>
     1be:	b0 93 7f 01 	sts	0x017F, r27	; 0x80017f <_ZL2xv+0xf>
	xv[4] = (float)sensorValue / (float) GAIN;
     1c2:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <_ZL11sensorValue>
     1c6:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <_ZL11sensorValue+0x1>
     1ca:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_ZL11sensorValue+0x2>
     1ce:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_ZL11sensorValue+0x3>
     1d2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
     1d6:	26 e6       	ldi	r18, 0x66	; 102
     1d8:	3e ee       	ldi	r19, 0xEE	; 238
     1da:	4d e7       	ldi	r20, 0x7D	; 125
     1dc:	51 e4       	ldi	r21, 0x41	; 65
     1de:	0e 94 a9 03 	call	0x752	; 0x752 <__divsf3>
     1e2:	9b 01       	movw	r18, r22
     1e4:	ac 01       	movw	r20, r24
     1e6:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <_ZL2xv+0x10>
     1ea:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <_ZL2xv+0x11>
     1ee:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZL2xv+0x12>
     1f2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <_ZL2xv+0x13>
	yv[0] = yv[1]; yv[1] = yv[2]; yv[2] = yv[3]; yv[3] = yv[4];
     1f6:	80 90 60 01 	lds	r8, 0x0160	; 0x800160 <_ZL2yv+0x4>
     1fa:	90 90 61 01 	lds	r9, 0x0161	; 0x800161 <_ZL2yv+0x5>
     1fe:	a0 90 62 01 	lds	r10, 0x0162	; 0x800162 <_ZL2yv+0x6>
     202:	b0 90 63 01 	lds	r11, 0x0163	; 0x800163 <_ZL2yv+0x7>
     206:	ec e5       	ldi	r30, 0x5C	; 92
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	80 82       	st	Z, r8
     20c:	91 82       	std	Z+1, r9	; 0x01
     20e:	a2 82       	std	Z+2, r10	; 0x02
     210:	b3 82       	std	Z+3, r11	; 0x03
     212:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_ZL2yv+0x8>
     216:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_ZL2yv+0x9>
     21a:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <_ZL2yv+0xa>
     21e:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <_ZL2yv+0xb>
     222:	89 83       	std	Y+1, r24	; 0x01
     224:	9a 83       	std	Y+2, r25	; 0x02
     226:	ab 83       	std	Y+3, r26	; 0x03
     228:	bc 83       	std	Y+4, r27	; 0x04
     22a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_ZL2yv+0x4>
     22e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_ZL2yv+0x5>
     232:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <_ZL2yv+0x6>
     236:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <_ZL2yv+0x7>
     23a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL2yv+0xc>
     23e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <_ZL2yv+0xd>
     242:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <_ZL2yv+0xe>
     246:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <_ZL2yv+0xf>
     24a:	8d 83       	std	Y+5, r24	; 0x05
     24c:	9e 83       	std	Y+6, r25	; 0x06
     24e:	af 83       	std	Y+7, r26	; 0x07
     250:	b8 87       	std	Y+8, r27	; 0x08
     252:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_ZL2yv+0x8>
     256:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <_ZL2yv+0x9>
     25a:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <_ZL2yv+0xa>
     25e:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <_ZL2yv+0xb>
     262:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <_ZL2yv+0x10>
     266:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <_ZL2yv+0x11>
     26a:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <_ZL2yv+0x12>
     26e:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <_ZL2yv+0x13>
     272:	89 87       	std	Y+9, r24	; 0x09
     274:	9a 87       	std	Y+10, r25	; 0x0a
     276:	ab 87       	std	Y+11, r26	; 0x0b
     278:	bc 87       	std	Y+12, r27	; 0x0c
     27a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_ZL2yv+0xc>
     27e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <_ZL2yv+0xd>
     282:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <_ZL2yv+0xe>
     286:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <_ZL2yv+0xf>
	yv[4] = (xv[0] + xv[4]) - 2 * xv[2] + (-0.4311751778 * yv[0]) + (2.0252665529 * yv[1]) + (-3.7457226060 * yv[2]) + (3.1513614870 * yv[3]);
     28a:	c3 01       	movw	r24, r6
     28c:	b2 01       	movw	r22, r4
     28e:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     292:	2b 01       	movw	r4, r22
     294:	3c 01       	movw	r6, r24
     296:	a7 01       	movw	r20, r14
     298:	96 01       	movw	r18, r12
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     2a2:	9b 01       	movw	r18, r22
     2a4:	ac 01       	movw	r20, r24
     2a6:	c3 01       	movw	r24, r6
     2a8:	b2 01       	movw	r22, r4
     2aa:	0e 94 3c 03 	call	0x678	; 0x678 <__subsf3>
     2ae:	6b 01       	movw	r12, r22
     2b0:	7c 01       	movw	r14, r24
     2b2:	2e ef       	ldi	r18, 0xFE	; 254
     2b4:	32 ec       	ldi	r19, 0xC2	; 194
     2b6:	4c ed       	ldi	r20, 0xDC	; 220
     2b8:	5e eb       	ldi	r21, 0xBE	; 190
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
     2c2:	9b 01       	movw	r18, r22
     2c4:	ac 01       	movw	r20, r24
     2c6:	c7 01       	movw	r24, r14
     2c8:	b6 01       	movw	r22, r12
     2ca:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     2ce:	6b 01       	movw	r12, r22
     2d0:	7c 01       	movw	r14, r24
     2d2:	28 ef       	ldi	r18, 0xF8	; 248
     2d4:	3d e9       	ldi	r19, 0x9D	; 157
     2d6:	41 e0       	ldi	r20, 0x01	; 1
     2d8:	50 e4       	ldi	r21, 0x40	; 64
     2da:	69 81       	ldd	r22, Y+1	; 0x01
     2dc:	7a 81       	ldd	r23, Y+2	; 0x02
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
     2e6:	9b 01       	movw	r18, r22
     2e8:	ac 01       	movw	r20, r24
     2ea:	c7 01       	movw	r24, r14
     2ec:	b6 01       	movw	r22, r12
     2ee:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     2f2:	6b 01       	movw	r12, r22
     2f4:	7c 01       	movw	r14, r24
     2f6:	2b ee       	ldi	r18, 0xEB	; 235
     2f8:	39 eb       	ldi	r19, 0xB9	; 185
     2fa:	4f e6       	ldi	r20, 0x6F	; 111
     2fc:	50 ec       	ldi	r21, 0xC0	; 192
     2fe:	6d 81       	ldd	r22, Y+5	; 0x05
     300:	7e 81       	ldd	r23, Y+6	; 0x06
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	98 85       	ldd	r25, Y+8	; 0x08
     306:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
     30a:	9b 01       	movw	r18, r22
     30c:	ac 01       	movw	r20, r24
     30e:	c7 01       	movw	r24, r14
     310:	b6 01       	movw	r22, r12
     312:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     316:	6b 01       	movw	r12, r22
     318:	7c 01       	movw	r14, r24
     31a:	28 ee       	ldi	r18, 0xE8	; 232
     31c:	3f ea       	ldi	r19, 0xAF	; 175
     31e:	49 e4       	ldi	r20, 0x49	; 73
     320:	50 e4       	ldi	r21, 0x40	; 64
     322:	69 85       	ldd	r22, Y+9	; 0x09
     324:	7a 85       	ldd	r23, Y+10	; 0x0a
     326:	8b 85       	ldd	r24, Y+11	; 0x0b
     328:	9c 85       	ldd	r25, Y+12	; 0x0c
     32a:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
     32e:	9b 01       	movw	r18, r22
     330:	ac 01       	movw	r20, r24
     332:	c7 01       	movw	r24, r14
     334:	b6 01       	movw	r22, r12
     336:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
     33a:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <_ZL2yv+0x10>
     33e:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <_ZL2yv+0x11>
     342:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_ZL2yv+0x12>
     346:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_ZL2yv+0x13>
	outputValue = (long int) yv[4];
     34a:	0e 94 1b 04 	call	0x836	; 0x836 <__fixsfsi>
     34e:	6b 01       	movw	r12, r22
     350:	7c 01       	movw	r14, r24
     352:	ff 0c       	add	r15, r15
     354:	cc 08       	sbc	r12, r12
     356:	dc 2c       	mov	r13, r12
     358:	76 01       	movw	r14, r12
     35a:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <_ZL11outputValue>
     35e:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <_ZL11outputValue+0x1>
     362:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_ZL11outputValue+0x2>
     366:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_ZL11outputValue+0x3>
     36a:	c0 92 54 01 	sts	0x0154, r12	; 0x800154 <_ZL11outputValue+0x4>
     36e:	c0 92 55 01 	sts	0x0155, r12	; 0x800155 <_ZL11outputValue+0x5>
     372:	c0 92 56 01 	sts	0x0156, r12	; 0x800156 <_ZL11outputValue+0x6>
     376:	c0 92 57 01 	sts	0x0157, r12	; 0x800157 <_ZL11outputValue+0x7>
	return outputValue;
     37a:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <_ZL11outputValue>
     37e:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <_ZL11outputValue+0x1>
     382:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <_ZL11outputValue+0x2>
     386:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <_ZL11outputValue+0x3>
     38a:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <_ZL11outputValue+0x4>
     38e:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <_ZL11outputValue+0x5>
     392:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZL11outputValue+0x6>
     396:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_ZL11outputValue+0x7>
}
     39a:	2c 96       	adiw	r28, 0x0c	; 12
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	7f 90       	pop	r7
     3bc:	6f 90       	pop	r6
     3be:	5f 90       	pop	r5
     3c0:	4f 90       	pop	r4
     3c2:	08 95       	ret

000003c4 <_Z14calcular_mediaPl>:

//calculo do tempo medio do batimento, de forma a estimar com mais precisão os batimentos por minuto
int calcular_media(long int vec[]) {
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	fc 01       	movw	r30, r24
  float batimentos = (vec[4] - vec[3]) + (vec[3] - vec[2]) + (vec[2] - vec[1]) + (vec[1] - vec[0]);
     3ca:	80 89       	ldd	r24, Z+16	; 0x10
     3cc:	91 89       	ldd	r25, Z+17	; 0x11
     3ce:	a2 89       	ldd	r26, Z+18	; 0x12
     3d0:	b3 89       	ldd	r27, Z+19	; 0x13
     3d2:	00 81       	ld	r16, Z
     3d4:	11 81       	ldd	r17, Z+1	; 0x01
     3d6:	22 81       	ldd	r18, Z+2	; 0x02
     3d8:	33 81       	ldd	r19, Z+3	; 0x03
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	60 1b       	sub	r22, r16
     3e0:	71 0b       	sbc	r23, r17
     3e2:	82 0b       	sbc	r24, r18
     3e4:	93 0b       	sbc	r25, r19
     3e6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__floatsisf>
  batimentos = batimentos / 4000; ///4 porque é a media de 4 pulsos e esta em milisegundos (1000) explica o pq de /(4*1000)
  return (int)(batimentos * 60);
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	4a e7       	ldi	r20, 0x7A	; 122
     3f0:	55 e4       	ldi	r21, 0x45	; 69
     3f2:	0e 94 a9 03 	call	0x752	; 0x752 <__divsf3>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e7       	ldi	r20, 0x70	; 112
     3fc:	52 e4       	ldi	r21, 0x42	; 66
     3fe:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
     402:	0e 94 1b 04 	call	0x836	; 0x836 <__fixsfsi>
}
     406:	cb 01       	movw	r24, r22
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <_Z10detect_bpmx>:

//algoritmo de deteção de bpm, baseia-se na deteçao do rising edge do sinal filtrado, ao passar por zero, conta 1 batimento
void detect_bpm(long long int resultado) {
     40e:	8f 92       	push	r8
     410:	9f 92       	push	r9
     412:	af 92       	push	r10
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	69 01       	movw	r12, r18
     428:	7a 01       	movw	r14, r20
     42a:	8b 01       	movw	r16, r22
     42c:	d8 2f       	mov	r29, r24
     42e:	c9 2f       	mov	r28, r25
  unsigned long long int tempo = millis(), tempo1 = 0, tempo2 = 0;
     430:	0e 94 51 09 	call	0x12a2	; 0x12a2 <millis>
     434:	4b 01       	movw	r8, r22
     436:	5c 01       	movw	r10, r24
  static long long int last_value = 0;
  static char flag = 0;
  static long int vec[5] = {0};
  static int i = 0;
  
  if (resultado == 0 || (resultado >= 0 && last_value < 0)) {//Se detetar rising edge ou a passar pelo zero, incrementa batimentos
     438:	96 01       	movw	r18, r12
     43a:	a7 01       	movw	r20, r14
     43c:	b8 01       	movw	r22, r16
     43e:	8d 2f       	mov	r24, r29
     440:	9c 2f       	mov	r25, r28
     442:	a0 e0       	ldi	r26, 0x00	; 0
     444:	0e 94 98 0a 	call	0x1530	; 0x1530 <__cmpdi2_s8>
     448:	b1 f0       	breq	.+44     	; 0x476 <_Z10detect_bpmx+0x68>
     44a:	0e 94 98 0a 	call	0x1530	; 0x1530 <__cmpdi2_s8>
     44e:	94 f1       	brlt	.+100    	; 0x4b4 <_Z10detect_bpmx+0xa6>
     450:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <_ZZ10detect_bpmxE10last_value>
     454:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <_ZZ10detect_bpmxE10last_value+0x1>
     458:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <_ZZ10detect_bpmxE10last_value+0x2>
     45c:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <_ZZ10detect_bpmxE10last_value+0x3>
     460:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <_ZZ10detect_bpmxE10last_value+0x4>
     464:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <_ZZ10detect_bpmxE10last_value+0x5>
     468:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <_ZZ10detect_bpmxE10last_value+0x6>
     46c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <_ZZ10detect_bpmxE10last_value+0x7>
     470:	0e 94 98 0a 	call	0x1530	; 0x1530 <__cmpdi2_s8>
     474:	fc f4       	brge	.+62     	; 0x4b4 <_Z10detect_bpmx+0xa6>
    bpm = bpm + 1;
     476:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZL3bpm>
     47a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_ZL3bpm+0x1>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_ZL3bpm+0x1>
     484:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_ZL3bpm>
    vec[i++] = tempo;
     488:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <_ZZ10detect_bpmxE1i>
     48c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <_ZZ10detect_bpmxE1i+0x1>
     490:	9c 01       	movw	r18, r24
     492:	2f 5f       	subi	r18, 0xFF	; 255
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <_ZZ10detect_bpmxE1i+0x1>
     49a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <_ZZ10detect_bpmxE1i>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	fc 01       	movw	r30, r24
     4a8:	ea 5d       	subi	r30, 0xDA	; 218
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	80 82       	st	Z, r8
     4ae:	91 82       	std	Z+1, r9	; 0x01
     4b0:	a2 82       	std	Z+2, r10	; 0x02
     4b2:	b3 82       	std	Z+3, r11	; 0x03
  }
  if (i == 5) {// a cada 5 batimentos estima o periodo, calcula os bpms aproximados
     4b4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <_ZZ10detect_bpmxE1i>
     4b8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <_ZZ10detect_bpmxE1i+0x1>
     4bc:	05 97       	sbiw	r24, 0x05	; 5
     4be:	09 f0       	breq	.+2      	; 0x4c2 <_Z10detect_bpmx+0xb4>
     4c0:	41 c0       	rjmp	.+130    	; 0x544 <_Z10detect_bpmx+0x136>
    bpm_calc = calcular_media(vec);
     4c2:	86 e2       	ldi	r24, 0x26	; 38
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z14calcular_mediaPl>
     4ca:	09 2e       	mov	r0, r25
     4cc:	00 0c       	add	r0, r0
     4ce:	aa 0b       	sbc	r26, r26
     4d0:	bb 0b       	sbc	r27, r27
     4d2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_ZL8bpm_calc>
     4d6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_ZL8bpm_calc+0x1>
     4da:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <_ZL8bpm_calc+0x2>
     4de:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <_ZL8bpm_calc+0x3>
    static long int bpm_anterior = 30;
    if (bpm_calc < 30) bpm_calc = bpm_anterior;
     4e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_ZL8bpm_calc>
     4e6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_ZL8bpm_calc+0x1>
     4ea:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <_ZL8bpm_calc+0x2>
     4ee:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <_ZL8bpm_calc+0x3>
     4f2:	4e 97       	sbiw	r24, 0x1e	; 30
     4f4:	a1 05       	cpc	r26, r1
     4f6:	b1 05       	cpc	r27, r1
     4f8:	8c f4       	brge	.+34     	; 0x51c <_Z10detect_bpmx+0x10e>
     4fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     502:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     506:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     50a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_ZL8bpm_calc>
     50e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_ZL8bpm_calc+0x1>
     512:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <_ZL8bpm_calc+0x2>
     516:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <_ZL8bpm_calc+0x3>
     51a:	10 c0       	rjmp	.+32     	; 0x53c <_Z10detect_bpmx+0x12e>
    else bpm_anterior = bpm_calc;
     51c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_ZL8bpm_calc>
     520:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_ZL8bpm_calc+0x1>
     524:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <_ZL8bpm_calc+0x2>
     528:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <_ZL8bpm_calc+0x3>
     52c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     530:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     534:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     538:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    i = 0;
     53c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_ZZ10detect_bpmxE1i+0x1>
     540:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_ZZ10detect_bpmxE1i>
  }
  last_value = resultado;
     544:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <_ZZ10detect_bpmxE10last_value>
     548:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <_ZZ10detect_bpmxE10last_value+0x1>
     54c:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <_ZZ10detect_bpmxE10last_value+0x2>
     550:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <_ZZ10detect_bpmxE10last_value+0x3>
     554:	00 93 40 01 	sts	0x0140, r16	; 0x800140 <_ZZ10detect_bpmxE10last_value+0x4>
     558:	10 93 41 01 	sts	0x0141, r17	; 0x800141 <_ZZ10detect_bpmxE10last_value+0x5>
     55c:	d0 93 42 01 	sts	0x0142, r29	; 0x800142 <_ZZ10detect_bpmxE10last_value+0x6>
     560:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <_ZZ10detect_bpmxE10last_value+0x7>
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	08 95       	ret

0000057e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     57e:	26 e0       	ldi	r18, 0x06	; 6
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	52 ec       	ldi	r21, 0xC2	; 194
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	84 e8       	ldi	r24, 0x84	; 132
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 75 06 	call	0xcea	; 0xcea <_ZN14HardwareSerial5beginEmh>

//definir pinos como INPUT, OUTPUT, PORTA SERIE
void setup() {
  Serial.begin(115200);//velocidade da porta serie
  pinMode(PIN_MODE,INPUT);//definir pino do switch como input
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	0e 94 de 09 	call	0x13bc	; 0x13bc <pinMode>
  bool switch_pin_val=digitalRead(PIN_MODE);
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <digitalRead>
  
  if(switch_pin_val){
     59e:	89 2b       	or	r24, r25
     5a0:	39 f0       	breq	.+14     	; 0x5b0 <setup+0x32>
	  flag_mode=1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <flag_mode+0x1>
     5aa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <flag_mode>
     5ae:	08 95       	ret
  }
  else flag_mode=0;
     5b0:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <flag_mode+0x1>
     5b4:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <flag_mode>
     5b8:	08 95       	ret

000005ba <loop>:
}


//main loop
void loop() {
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
  unsigned long currentMillis = millis();
     5ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <millis>
     5ce:	6b 01       	movw	r12, r22
     5d0:	7c 01       	movw	r14, r24
  if (currentMillis - previousMillis >= 10) {//a cada 10 ms fazer 1 amostragem do adc
     5d2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <previousMillis>
     5d6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <previousMillis+0x1>
     5da:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <previousMillis+0x2>
     5de:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <previousMillis+0x3>
     5e2:	a7 01       	movw	r20, r14
     5e4:	96 01       	movw	r18, r12
     5e6:	28 1b       	sub	r18, r24
     5e8:	39 0b       	sbc	r19, r25
     5ea:	4a 0b       	sbc	r20, r26
     5ec:	5b 0b       	sbc	r21, r27
     5ee:	2a 30       	cpi	r18, 0x0A	; 10
     5f0:	31 05       	cpc	r19, r1
     5f2:	41 05       	cpc	r20, r1
     5f4:	51 05       	cpc	r21, r1
     5f6:	b8 f1       	brcs	.+110    	; 0x666 <loop+0xac>
    sensorValue = analogRead(A3);// It takes about 100 microseconds (0.0001 s) to read an analog input, so the maximum reading rate is about 10,000 times a second.
     5f8:	81 e1       	ldi	r24, 0x11	; 17
     5fa:	0e 94 98 09 	call	0x1330	; 0x1330 <analogRead>
     5fe:	09 2e       	mov	r0, r25
     600:	00 0c       	add	r0, r0
     602:	aa 0b       	sbc	r26, r26
     604:	bb 0b       	sbc	r27, r27
     606:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_ZL11sensorValue>
     60a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_ZL11sensorValue+0x1>
     60e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <_ZL11sensorValue+0x2>
     612:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <_ZL11sensorValue+0x3>
    previousMillis = currentMillis;
     616:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <previousMillis>
     61a:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <previousMillis+0x1>
     61e:	e0 92 4e 01 	sts	0x014E, r14	; 0x80014e <previousMillis+0x2>
     622:	f0 92 4f 01 	sts	0x014F, r15	; 0x80014f <previousMillis+0x3>
    signed long long int result = filterloop();//resultado do filtro, o filtro esta sempre a correr com os dados que vao chegando
     626:	0e 94 8c 00 	call	0x118	; 0x118 <_Z10filterloopv>
     62a:	69 01       	movw	r12, r18
     62c:	7a 01       	movw	r14, r20
     62e:	8b 01       	movw	r16, r22
     630:	d8 2f       	mov	r29, r24
     632:	c9 2f       	mov	r28, r25
    detect_bpm(result);
     634:	0e 94 07 02 	call	0x40e	; 0x40e <_Z10detect_bpmx>

    //Serial.println(sensorValue);//valor lido diretamente do hardware
    Serial.println((double)result);//valor de saida do filtro digital
     638:	96 01       	movw	r18, r12
     63a:	a7 01       	movw	r20, r14
     63c:	b8 01       	movw	r22, r16
     63e:	8d 2f       	mov	r24, r29
     640:	9c 2f       	mov	r25, r28
     642:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__floatdisf>
     646:	ab 01       	movw	r20, r22
     648:	bc 01       	movw	r22, r24
     64a:	22 e0       	ldi	r18, 0x02	; 2
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	84 e8       	ldi	r24, 0x84	; 132
     650:	91 e0       	ldi	r25, 0x01	; 1
    //Serial.print(" ");//para conseguir ver varias linhas no serial plotter
    //Serial.println(bpm_calc);//ver calculo dos BPM
  }
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
    previousMillis = currentMillis;
    signed long long int result = filterloop();//resultado do filtro, o filtro esta sempre a correr com os dados que vao chegando
    detect_bpm(result);

    //Serial.println(sensorValue);//valor lido diretamente do hardware
    Serial.println((double)result);//valor de saida do filtro digital
     662:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <_ZN5Print7printlnEdi>
    //Serial.print(" ");//para conseguir ver varias linhas no serial plotter
    //Serial.println(bpm_calc);//ver calculo dos BPM
  }
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	08 95       	ret

00000678 <__subsf3>:
     678:	50 58       	subi	r21, 0x80	; 128

0000067a <__addsf3>:
     67a:	bb 27       	eor	r27, r27
     67c:	aa 27       	eor	r26, r26
     67e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__addsf3x>
     682:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_round>
     686:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_pscA>
     68a:	38 f0       	brcs	.+14     	; 0x69a <__addsf3+0x20>
     68c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscB>
     690:	20 f0       	brcs	.+8      	; 0x69a <__addsf3+0x20>
     692:	39 f4       	brne	.+14     	; 0x6a2 <__addsf3+0x28>
     694:	9f 3f       	cpi	r25, 0xFF	; 255
     696:	19 f4       	brne	.+6      	; 0x69e <__addsf3+0x24>
     698:	26 f4       	brtc	.+8      	; 0x6a2 <__addsf3+0x28>
     69a:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_nan>
     69e:	0e f4       	brtc	.+2      	; 0x6a2 <__addsf3+0x28>
     6a0:	e0 95       	com	r30
     6a2:	e7 fb       	bst	r30, 7
     6a4:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_inf>

000006a8 <__addsf3x>:
     6a8:	e9 2f       	mov	r30, r25
     6aa:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_split3>
     6ae:	58 f3       	brcs	.-42     	; 0x686 <__addsf3+0xc>
     6b0:	ba 17       	cp	r27, r26
     6b2:	62 07       	cpc	r22, r18
     6b4:	73 07       	cpc	r23, r19
     6b6:	84 07       	cpc	r24, r20
     6b8:	95 07       	cpc	r25, r21
     6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__addsf3x+0x1c>
     6bc:	79 f4       	brne	.+30     	; 0x6dc <__addsf3x+0x34>
     6be:	a6 f5       	brtc	.+104    	; 0x728 <__addsf3x+0x80>
     6c0:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_zero>
     6c4:	0e f4       	brtc	.+2      	; 0x6c8 <__addsf3x+0x20>
     6c6:	e0 95       	com	r30
     6c8:	0b 2e       	mov	r0, r27
     6ca:	ba 2f       	mov	r27, r26
     6cc:	a0 2d       	mov	r26, r0
     6ce:	0b 01       	movw	r0, r22
     6d0:	b9 01       	movw	r22, r18
     6d2:	90 01       	movw	r18, r0
     6d4:	0c 01       	movw	r0, r24
     6d6:	ca 01       	movw	r24, r20
     6d8:	a0 01       	movw	r20, r0
     6da:	11 24       	eor	r1, r1
     6dc:	ff 27       	eor	r31, r31
     6de:	59 1b       	sub	r21, r25
     6e0:	99 f0       	breq	.+38     	; 0x708 <__addsf3x+0x60>
     6e2:	59 3f       	cpi	r21, 0xF9	; 249
     6e4:	50 f4       	brcc	.+20     	; 0x6fa <__addsf3x+0x52>
     6e6:	50 3e       	cpi	r21, 0xE0	; 224
     6e8:	68 f1       	brcs	.+90     	; 0x744 <__addsf3x+0x9c>
     6ea:	1a 16       	cp	r1, r26
     6ec:	f0 40       	sbci	r31, 0x00	; 0
     6ee:	a2 2f       	mov	r26, r18
     6f0:	23 2f       	mov	r18, r19
     6f2:	34 2f       	mov	r19, r20
     6f4:	44 27       	eor	r20, r20
     6f6:	58 5f       	subi	r21, 0xF8	; 248
     6f8:	f3 cf       	rjmp	.-26     	; 0x6e0 <__addsf3x+0x38>
     6fa:	46 95       	lsr	r20
     6fc:	37 95       	ror	r19
     6fe:	27 95       	ror	r18
     700:	a7 95       	ror	r26
     702:	f0 40       	sbci	r31, 0x00	; 0
     704:	53 95       	inc	r21
     706:	c9 f7       	brne	.-14     	; 0x6fa <__addsf3x+0x52>
     708:	7e f4       	brtc	.+30     	; 0x728 <__addsf3x+0x80>
     70a:	1f 16       	cp	r1, r31
     70c:	ba 0b       	sbc	r27, r26
     70e:	62 0b       	sbc	r22, r18
     710:	73 0b       	sbc	r23, r19
     712:	84 0b       	sbc	r24, r20
     714:	ba f0       	brmi	.+46     	; 0x744 <__addsf3x+0x9c>
     716:	91 50       	subi	r25, 0x01	; 1
     718:	a1 f0       	breq	.+40     	; 0x742 <__addsf3x+0x9a>
     71a:	ff 0f       	add	r31, r31
     71c:	bb 1f       	adc	r27, r27
     71e:	66 1f       	adc	r22, r22
     720:	77 1f       	adc	r23, r23
     722:	88 1f       	adc	r24, r24
     724:	c2 f7       	brpl	.-16     	; 0x716 <__addsf3x+0x6e>
     726:	0e c0       	rjmp	.+28     	; 0x744 <__addsf3x+0x9c>
     728:	ba 0f       	add	r27, r26
     72a:	62 1f       	adc	r22, r18
     72c:	73 1f       	adc	r23, r19
     72e:	84 1f       	adc	r24, r20
     730:	48 f4       	brcc	.+18     	; 0x744 <__addsf3x+0x9c>
     732:	87 95       	ror	r24
     734:	77 95       	ror	r23
     736:	67 95       	ror	r22
     738:	b7 95       	ror	r27
     73a:	f7 95       	ror	r31
     73c:	9e 3f       	cpi	r25, 0xFE	; 254
     73e:	08 f0       	brcs	.+2      	; 0x742 <__addsf3x+0x9a>
     740:	b0 cf       	rjmp	.-160    	; 0x6a2 <__addsf3+0x28>
     742:	93 95       	inc	r25
     744:	88 0f       	add	r24, r24
     746:	08 f0       	brcs	.+2      	; 0x74a <__addsf3x+0xa2>
     748:	99 27       	eor	r25, r25
     74a:	ee 0f       	add	r30, r30
     74c:	97 95       	ror	r25
     74e:	87 95       	ror	r24
     750:	08 95       	ret

00000752 <__divsf3>:
     752:	0e 94 bd 03 	call	0x77a	; 0x77a <__divsf3x>
     756:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_round>
     75a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscB>
     75e:	58 f0       	brcs	.+22     	; 0x776 <__divsf3+0x24>
     760:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_pscA>
     764:	40 f0       	brcs	.+16     	; 0x776 <__divsf3+0x24>
     766:	29 f4       	brne	.+10     	; 0x772 <__divsf3+0x20>
     768:	5f 3f       	cpi	r21, 0xFF	; 255
     76a:	29 f0       	breq	.+10     	; 0x776 <__divsf3+0x24>
     76c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_inf>
     770:	51 11       	cpse	r21, r1
     772:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_szero>
     776:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_nan>

0000077a <__divsf3x>:
     77a:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_split3>
     77e:	68 f3       	brcs	.-38     	; 0x75a <__divsf3+0x8>

00000780 <__divsf3_pse>:
     780:	99 23       	and	r25, r25
     782:	b1 f3       	breq	.-20     	; 0x770 <__divsf3+0x1e>
     784:	55 23       	and	r21, r21
     786:	91 f3       	breq	.-28     	; 0x76c <__divsf3+0x1a>
     788:	95 1b       	sub	r25, r21
     78a:	55 0b       	sbc	r21, r21
     78c:	bb 27       	eor	r27, r27
     78e:	aa 27       	eor	r26, r26
     790:	62 17       	cp	r22, r18
     792:	73 07       	cpc	r23, r19
     794:	84 07       	cpc	r24, r20
     796:	38 f0       	brcs	.+14     	; 0x7a6 <__divsf3_pse+0x26>
     798:	9f 5f       	subi	r25, 0xFF	; 255
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	44 1f       	adc	r20, r20
     7a2:	aa 1f       	adc	r26, r26
     7a4:	a9 f3       	breq	.-22     	; 0x790 <__divsf3_pse+0x10>
     7a6:	35 d0       	rcall	.+106    	; 0x812 <__divsf3_pse+0x92>
     7a8:	0e 2e       	mov	r0, r30
     7aa:	3a f0       	brmi	.+14     	; 0x7ba <__divsf3_pse+0x3a>
     7ac:	e0 e8       	ldi	r30, 0x80	; 128
     7ae:	32 d0       	rcall	.+100    	; 0x814 <__divsf3_pse+0x94>
     7b0:	91 50       	subi	r25, 0x01	; 1
     7b2:	50 40       	sbci	r21, 0x00	; 0
     7b4:	e6 95       	lsr	r30
     7b6:	00 1c       	adc	r0, r0
     7b8:	ca f7       	brpl	.-14     	; 0x7ac <__divsf3_pse+0x2c>
     7ba:	2b d0       	rcall	.+86     	; 0x812 <__divsf3_pse+0x92>
     7bc:	fe 2f       	mov	r31, r30
     7be:	29 d0       	rcall	.+82     	; 0x812 <__divsf3_pse+0x92>
     7c0:	66 0f       	add	r22, r22
     7c2:	77 1f       	adc	r23, r23
     7c4:	88 1f       	adc	r24, r24
     7c6:	bb 1f       	adc	r27, r27
     7c8:	26 17       	cp	r18, r22
     7ca:	37 07       	cpc	r19, r23
     7cc:	48 07       	cpc	r20, r24
     7ce:	ab 07       	cpc	r26, r27
     7d0:	b0 e8       	ldi	r27, 0x80	; 128
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__divsf3_pse+0x56>
     7d4:	bb 0b       	sbc	r27, r27
     7d6:	80 2d       	mov	r24, r0
     7d8:	bf 01       	movw	r22, r30
     7da:	ff 27       	eor	r31, r31
     7dc:	93 58       	subi	r25, 0x83	; 131
     7de:	5f 4f       	sbci	r21, 0xFF	; 255
     7e0:	3a f0       	brmi	.+14     	; 0x7f0 <__divsf3_pse+0x70>
     7e2:	9e 3f       	cpi	r25, 0xFE	; 254
     7e4:	51 05       	cpc	r21, r1
     7e6:	78 f0       	brcs	.+30     	; 0x806 <__divsf3_pse+0x86>
     7e8:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_inf>
     7ec:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_szero>
     7f0:	5f 3f       	cpi	r21, 0xFF	; 255
     7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__divsf3_pse+0x6c>
     7f4:	98 3e       	cpi	r25, 0xE8	; 232
     7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__divsf3_pse+0x6c>
     7f8:	86 95       	lsr	r24
     7fa:	77 95       	ror	r23
     7fc:	67 95       	ror	r22
     7fe:	b7 95       	ror	r27
     800:	f7 95       	ror	r31
     802:	9f 5f       	subi	r25, 0xFF	; 255
     804:	c9 f7       	brne	.-14     	; 0x7f8 <__divsf3_pse+0x78>
     806:	88 0f       	add	r24, r24
     808:	91 1d       	adc	r25, r1
     80a:	96 95       	lsr	r25
     80c:	87 95       	ror	r24
     80e:	97 f9       	bld	r25, 7
     810:	08 95       	ret
     812:	e1 e0       	ldi	r30, 0x01	; 1
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	88 1f       	adc	r24, r24
     81a:	bb 1f       	adc	r27, r27
     81c:	62 17       	cp	r22, r18
     81e:	73 07       	cpc	r23, r19
     820:	84 07       	cpc	r24, r20
     822:	ba 07       	cpc	r27, r26
     824:	20 f0       	brcs	.+8      	; 0x82e <__divsf3_pse+0xae>
     826:	62 1b       	sub	r22, r18
     828:	73 0b       	sbc	r23, r19
     82a:	84 0b       	sbc	r24, r20
     82c:	ba 0b       	sbc	r27, r26
     82e:	ee 1f       	adc	r30, r30
     830:	88 f7       	brcc	.-30     	; 0x814 <__divsf3_pse+0x94>
     832:	e0 95       	com	r30
     834:	08 95       	ret

00000836 <__fixsfsi>:
     836:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
     83a:	68 94       	set
     83c:	b1 11       	cpse	r27, r1
     83e:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_szero>
     842:	08 95       	ret

00000844 <__fixunssfsi>:
     844:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_splitA>
     848:	88 f0       	brcs	.+34     	; 0x86c <__fixunssfsi+0x28>
     84a:	9f 57       	subi	r25, 0x7F	; 127
     84c:	98 f0       	brcs	.+38     	; 0x874 <__fixunssfsi+0x30>
     84e:	b9 2f       	mov	r27, r25
     850:	99 27       	eor	r25, r25
     852:	b7 51       	subi	r27, 0x17	; 23
     854:	b0 f0       	brcs	.+44     	; 0x882 <__fixunssfsi+0x3e>
     856:	e1 f0       	breq	.+56     	; 0x890 <__fixunssfsi+0x4c>
     858:	66 0f       	add	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	88 1f       	adc	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	1a f0       	brmi	.+6      	; 0x868 <__fixunssfsi+0x24>
     862:	ba 95       	dec	r27
     864:	c9 f7       	brne	.-14     	; 0x858 <__fixunssfsi+0x14>
     866:	14 c0       	rjmp	.+40     	; 0x890 <__fixunssfsi+0x4c>
     868:	b1 30       	cpi	r27, 0x01	; 1
     86a:	91 f0       	breq	.+36     	; 0x890 <__fixunssfsi+0x4c>
     86c:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_zero>
     870:	b1 e0       	ldi	r27, 0x01	; 1
     872:	08 95       	ret
     874:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_zero>
     878:	67 2f       	mov	r22, r23
     87a:	78 2f       	mov	r23, r24
     87c:	88 27       	eor	r24, r24
     87e:	b8 5f       	subi	r27, 0xF8	; 248
     880:	39 f0       	breq	.+14     	; 0x890 <__fixunssfsi+0x4c>
     882:	b9 3f       	cpi	r27, 0xF9	; 249
     884:	cc f3       	brlt	.-14     	; 0x878 <__fixunssfsi+0x34>
     886:	86 95       	lsr	r24
     888:	77 95       	ror	r23
     88a:	67 95       	ror	r22
     88c:	b3 95       	inc	r27
     88e:	d9 f7       	brne	.-10     	; 0x886 <__fixunssfsi+0x42>
     890:	3e f4       	brtc	.+14     	; 0x8a0 <__fixunssfsi+0x5c>
     892:	90 95       	com	r25
     894:	80 95       	com	r24
     896:	70 95       	com	r23
     898:	61 95       	neg	r22
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	8f 4f       	sbci	r24, 0xFF	; 255
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	08 95       	ret

000008a2 <__floatdisf>:
     8a2:	97 fb       	bst	r25, 7
     8a4:	16 f4       	brtc	.+4      	; 0x8aa <__floatdisf+0x8>
     8a6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_negdi>
     8aa:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_di2sf>

000008ae <__floatunsisf>:
     8ae:	e8 94       	clt
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__floatsisf+0x12>

000008b2 <__floatsisf>:
     8b2:	97 fb       	bst	r25, 7
     8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__floatsisf+0x12>
     8b6:	90 95       	com	r25
     8b8:	80 95       	com	r24
     8ba:	70 95       	com	r23
     8bc:	61 95       	neg	r22
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	8f 4f       	sbci	r24, 0xFF	; 255
     8c2:	9f 4f       	sbci	r25, 0xFF	; 255
     8c4:	99 23       	and	r25, r25
     8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x40>
     8c8:	f9 2f       	mov	r31, r25
     8ca:	96 e9       	ldi	r25, 0x96	; 150
     8cc:	bb 27       	eor	r27, r27
     8ce:	93 95       	inc	r25
     8d0:	f6 95       	lsr	r31
     8d2:	87 95       	ror	r24
     8d4:	77 95       	ror	r23
     8d6:	67 95       	ror	r22
     8d8:	b7 95       	ror	r27
     8da:	f1 11       	cpse	r31, r1
     8dc:	f8 cf       	rjmp	.-16     	; 0x8ce <__floatsisf+0x1c>
     8de:	fa f4       	brpl	.+62     	; 0x91e <__stack+0x1f>
     8e0:	bb 0f       	add	r27, r27
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <__floatsisf+0x36>
     8e4:	60 ff       	sbrs	r22, 0
     8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	8f 4f       	sbci	r24, 0xFF	; 255
     8ee:	9f 4f       	sbci	r25, 0xFF	; 255
     8f0:	16 c0       	rjmp	.+44     	; 0x91e <__stack+0x1f>
     8f2:	88 23       	and	r24, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <__floatsisf+0x48>
     8f6:	96 e9       	ldi	r25, 0x96	; 150
     8f8:	11 c0       	rjmp	.+34     	; 0x91c <__stack+0x1d>
     8fa:	77 23       	and	r23, r23
     8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
     8fe:	9e e8       	ldi	r25, 0x8E	; 142
     900:	87 2f       	mov	r24, r23
     902:	76 2f       	mov	r23, r22
     904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x11>
     906:	66 23       	and	r22, r22
     908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
     90a:	96 e8       	ldi	r25, 0x86	; 134
     90c:	86 2f       	mov	r24, r22
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	2a f0       	brmi	.+10     	; 0x91e <__stack+0x1f>
     914:	9a 95       	dec	r25
     916:	66 0f       	add	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	88 1f       	adc	r24, r24
     91c:	da f7       	brpl	.-10     	; 0x914 <__stack+0x15>
     91e:	88 0f       	add	r24, r24
     920:	96 95       	lsr	r25
     922:	87 95       	ror	r24
     924:	97 f9       	bld	r25, 7
     926:	08 95       	ret

00000928 <__floatundisf>:
     928:	e8 94       	clt

0000092a <__fp_di2sf>:
     92a:	f9 2f       	mov	r31, r25
     92c:	96 eb       	ldi	r25, 0xB6	; 182
     92e:	ff 23       	and	r31, r31
     930:	81 f0       	breq	.+32     	; 0x952 <__fp_di2sf+0x28>
     932:	12 16       	cp	r1, r18
     934:	13 06       	cpc	r1, r19
     936:	14 06       	cpc	r1, r20
     938:	44 0b       	sbc	r20, r20
     93a:	93 95       	inc	r25
     93c:	f6 95       	lsr	r31
     93e:	87 95       	ror	r24
     940:	77 95       	ror	r23
     942:	67 95       	ror	r22
     944:	57 95       	ror	r21
     946:	40 40       	sbci	r20, 0x00	; 0
     948:	ff 23       	and	r31, r31
     94a:	b9 f7       	brne	.-18     	; 0x93a <__fp_di2sf+0x10>
     94c:	1b c0       	rjmp	.+54     	; 0x984 <__fp_di2sf+0x5a>
     94e:	99 27       	eor	r25, r25
     950:	08 95       	ret
     952:	88 23       	and	r24, r24
     954:	51 f4       	brne	.+20     	; 0x96a <__fp_di2sf+0x40>
     956:	98 50       	subi	r25, 0x08	; 8
     958:	d2 f7       	brpl	.-12     	; 0x94e <__fp_di2sf+0x24>
     95a:	87 2b       	or	r24, r23
     95c:	76 2f       	mov	r23, r22
     95e:	65 2f       	mov	r22, r21
     960:	54 2f       	mov	r21, r20
     962:	43 2f       	mov	r20, r19
     964:	32 2f       	mov	r19, r18
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	b1 f3       	breq	.-20     	; 0x956 <__fp_di2sf+0x2c>
     96a:	12 16       	cp	r1, r18
     96c:	13 06       	cpc	r1, r19
     96e:	14 06       	cpc	r1, r20
     970:	44 0b       	sbc	r20, r20
     972:	88 23       	and	r24, r24
     974:	3a f0       	brmi	.+14     	; 0x984 <__fp_di2sf+0x5a>
     976:	9a 95       	dec	r25
     978:	44 0f       	add	r20, r20
     97a:	55 1f       	adc	r21, r21
     97c:	66 1f       	adc	r22, r22
     97e:	77 1f       	adc	r23, r23
     980:	88 1f       	adc	r24, r24
     982:	ca f7       	brpl	.-14     	; 0x976 <__fp_di2sf+0x4c>
     984:	55 23       	and	r21, r21
     986:	4a f4       	brpl	.+18     	; 0x99a <__fp_di2sf+0x70>
     988:	44 0f       	add	r20, r20
     98a:	55 1f       	adc	r21, r21
     98c:	11 f4       	brne	.+4      	; 0x992 <__fp_di2sf+0x68>
     98e:	60 ff       	sbrs	r22, 0
     990:	04 c0       	rjmp	.+8      	; 0x99a <__fp_di2sf+0x70>
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	8f 4f       	sbci	r24, 0xFF	; 255
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	88 0f       	add	r24, r24
     99c:	96 95       	lsr	r25
     99e:	87 95       	ror	r24
     9a0:	97 f9       	bld	r25, 7
     9a2:	08 95       	ret

000009a4 <__fp_inf>:
     9a4:	97 f9       	bld	r25, 7
     9a6:	9f 67       	ori	r25, 0x7F	; 127
     9a8:	80 e8       	ldi	r24, 0x80	; 128
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <__fp_nan>:
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	80 ec       	ldi	r24, 0xC0	; 192
     9b4:	08 95       	ret

000009b6 <__fp_negdi>:
     9b6:	90 95       	com	r25
     9b8:	80 95       	com	r24
     9ba:	70 95       	com	r23
     9bc:	60 95       	com	r22
     9be:	50 95       	com	r21
     9c0:	40 95       	com	r20
     9c2:	30 95       	com	r19
     9c4:	21 95       	neg	r18
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	4f 4f       	sbci	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	6f 4f       	sbci	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	8f 4f       	sbci	r24, 0xFF	; 255
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	08 95       	ret

000009d6 <__fp_pscA>:
     9d6:	00 24       	eor	r0, r0
     9d8:	0a 94       	dec	r0
     9da:	16 16       	cp	r1, r22
     9dc:	17 06       	cpc	r1, r23
     9de:	18 06       	cpc	r1, r24
     9e0:	09 06       	cpc	r0, r25
     9e2:	08 95       	ret

000009e4 <__fp_pscB>:
     9e4:	00 24       	eor	r0, r0
     9e6:	0a 94       	dec	r0
     9e8:	12 16       	cp	r1, r18
     9ea:	13 06       	cpc	r1, r19
     9ec:	14 06       	cpc	r1, r20
     9ee:	05 06       	cpc	r0, r21
     9f0:	08 95       	ret

000009f2 <__fp_round>:
     9f2:	09 2e       	mov	r0, r25
     9f4:	03 94       	inc	r0
     9f6:	00 0c       	add	r0, r0
     9f8:	11 f4       	brne	.+4      	; 0x9fe <__fp_round+0xc>
     9fa:	88 23       	and	r24, r24
     9fc:	52 f0       	brmi	.+20     	; 0xa12 <__fp_round+0x20>
     9fe:	bb 0f       	add	r27, r27
     a00:	40 f4       	brcc	.+16     	; 0xa12 <__fp_round+0x20>
     a02:	bf 2b       	or	r27, r31
     a04:	11 f4       	brne	.+4      	; 0xa0a <__fp_round+0x18>
     a06:	60 ff       	sbrs	r22, 0
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <__fp_round+0x20>
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	8f 4f       	sbci	r24, 0xFF	; 255
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	08 95       	ret

00000a14 <__fp_split3>:
     a14:	57 fd       	sbrc	r21, 7
     a16:	90 58       	subi	r25, 0x80	; 128
     a18:	44 0f       	add	r20, r20
     a1a:	55 1f       	adc	r21, r21
     a1c:	59 f0       	breq	.+22     	; 0xa34 <__fp_splitA+0x10>
     a1e:	5f 3f       	cpi	r21, 0xFF	; 255
     a20:	71 f0       	breq	.+28     	; 0xa3e <__fp_splitA+0x1a>
     a22:	47 95       	ror	r20

00000a24 <__fp_splitA>:
     a24:	88 0f       	add	r24, r24
     a26:	97 fb       	bst	r25, 7
     a28:	99 1f       	adc	r25, r25
     a2a:	61 f0       	breq	.+24     	; 0xa44 <__fp_splitA+0x20>
     a2c:	9f 3f       	cpi	r25, 0xFF	; 255
     a2e:	79 f0       	breq	.+30     	; 0xa4e <__fp_splitA+0x2a>
     a30:	87 95       	ror	r24
     a32:	08 95       	ret
     a34:	12 16       	cp	r1, r18
     a36:	13 06       	cpc	r1, r19
     a38:	14 06       	cpc	r1, r20
     a3a:	55 1f       	adc	r21, r21
     a3c:	f2 cf       	rjmp	.-28     	; 0xa22 <__fp_split3+0xe>
     a3e:	46 95       	lsr	r20
     a40:	f1 df       	rcall	.-30     	; 0xa24 <__fp_splitA>
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <__fp_splitA+0x30>
     a44:	16 16       	cp	r1, r22
     a46:	17 06       	cpc	r1, r23
     a48:	18 06       	cpc	r1, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	f1 cf       	rjmp	.-30     	; 0xa30 <__fp_splitA+0xc>
     a4e:	86 95       	lsr	r24
     a50:	71 05       	cpc	r23, r1
     a52:	61 05       	cpc	r22, r1
     a54:	08 94       	sec
     a56:	08 95       	ret

00000a58 <__fp_zero>:
     a58:	e8 94       	clt

00000a5a <__fp_szero>:
     a5a:	bb 27       	eor	r27, r27
     a5c:	66 27       	eor	r22, r22
     a5e:	77 27       	eor	r23, r23
     a60:	cb 01       	movw	r24, r22
     a62:	97 f9       	bld	r25, 7
     a64:	08 95       	ret

00000a66 <__mulsf3>:
     a66:	0e 94 46 05 	call	0xa8c	; 0xa8c <__mulsf3x>
     a6a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_round>
     a6e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_pscA>
     a72:	38 f0       	brcs	.+14     	; 0xa82 <__mulsf3+0x1c>
     a74:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscB>
     a78:	20 f0       	brcs	.+8      	; 0xa82 <__mulsf3+0x1c>
     a7a:	95 23       	and	r25, r21
     a7c:	11 f0       	breq	.+4      	; 0xa82 <__mulsf3+0x1c>
     a7e:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_inf>
     a82:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_nan>
     a86:	11 24       	eor	r1, r1
     a88:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_szero>

00000a8c <__mulsf3x>:
     a8c:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_split3>
     a90:	70 f3       	brcs	.-36     	; 0xa6e <__mulsf3+0x8>

00000a92 <__mulsf3_pse>:
     a92:	95 9f       	mul	r25, r21
     a94:	c1 f3       	breq	.-16     	; 0xa86 <__mulsf3+0x20>
     a96:	95 0f       	add	r25, r21
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	55 1f       	adc	r21, r21
     a9c:	62 9f       	mul	r22, r18
     a9e:	f0 01       	movw	r30, r0
     aa0:	72 9f       	mul	r23, r18
     aa2:	bb 27       	eor	r27, r27
     aa4:	f0 0d       	add	r31, r0
     aa6:	b1 1d       	adc	r27, r1
     aa8:	63 9f       	mul	r22, r19
     aaa:	aa 27       	eor	r26, r26
     aac:	f0 0d       	add	r31, r0
     aae:	b1 1d       	adc	r27, r1
     ab0:	aa 1f       	adc	r26, r26
     ab2:	64 9f       	mul	r22, r20
     ab4:	66 27       	eor	r22, r22
     ab6:	b0 0d       	add	r27, r0
     ab8:	a1 1d       	adc	r26, r1
     aba:	66 1f       	adc	r22, r22
     abc:	82 9f       	mul	r24, r18
     abe:	22 27       	eor	r18, r18
     ac0:	b0 0d       	add	r27, r0
     ac2:	a1 1d       	adc	r26, r1
     ac4:	62 1f       	adc	r22, r18
     ac6:	73 9f       	mul	r23, r19
     ac8:	b0 0d       	add	r27, r0
     aca:	a1 1d       	adc	r26, r1
     acc:	62 1f       	adc	r22, r18
     ace:	83 9f       	mul	r24, r19
     ad0:	a0 0d       	add	r26, r0
     ad2:	61 1d       	adc	r22, r1
     ad4:	22 1f       	adc	r18, r18
     ad6:	74 9f       	mul	r23, r20
     ad8:	33 27       	eor	r19, r19
     ada:	a0 0d       	add	r26, r0
     adc:	61 1d       	adc	r22, r1
     ade:	23 1f       	adc	r18, r19
     ae0:	84 9f       	mul	r24, r20
     ae2:	60 0d       	add	r22, r0
     ae4:	21 1d       	adc	r18, r1
     ae6:	82 2f       	mov	r24, r18
     ae8:	76 2f       	mov	r23, r22
     aea:	6a 2f       	mov	r22, r26
     aec:	11 24       	eor	r1, r1
     aee:	9f 57       	subi	r25, 0x7F	; 127
     af0:	50 40       	sbci	r21, 0x00	; 0
     af2:	9a f0       	brmi	.+38     	; 0xb1a <__mulsf3_pse+0x88>
     af4:	f1 f0       	breq	.+60     	; 0xb32 <__mulsf3_pse+0xa0>
     af6:	88 23       	and	r24, r24
     af8:	4a f0       	brmi	.+18     	; 0xb0c <__mulsf3_pse+0x7a>
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	bb 1f       	adc	r27, r27
     b00:	66 1f       	adc	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	88 1f       	adc	r24, r24
     b06:	91 50       	subi	r25, 0x01	; 1
     b08:	50 40       	sbci	r21, 0x00	; 0
     b0a:	a9 f7       	brne	.-22     	; 0xaf6 <__mulsf3_pse+0x64>
     b0c:	9e 3f       	cpi	r25, 0xFE	; 254
     b0e:	51 05       	cpc	r21, r1
     b10:	80 f0       	brcs	.+32     	; 0xb32 <__mulsf3_pse+0xa0>
     b12:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_inf>
     b16:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_szero>
     b1a:	5f 3f       	cpi	r21, 0xFF	; 255
     b1c:	e4 f3       	brlt	.-8      	; 0xb16 <__mulsf3_pse+0x84>
     b1e:	98 3e       	cpi	r25, 0xE8	; 232
     b20:	d4 f3       	brlt	.-12     	; 0xb16 <__mulsf3_pse+0x84>
     b22:	86 95       	lsr	r24
     b24:	77 95       	ror	r23
     b26:	67 95       	ror	r22
     b28:	b7 95       	ror	r27
     b2a:	f7 95       	ror	r31
     b2c:	e7 95       	ror	r30
     b2e:	9f 5f       	subi	r25, 0xFF	; 255
     b30:	c1 f7       	brne	.-16     	; 0xb22 <__mulsf3_pse+0x90>
     b32:	fe 2b       	or	r31, r30
     b34:	88 0f       	add	r24, r24
     b36:	91 1d       	adc	r25, r1
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	97 f9       	bld	r25, 7
     b3e:	08 95       	ret

00000b40 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b40:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b42:	91 8d       	ldd	r25, Z+25	; 0x19
     b44:	22 8d       	ldd	r18, Z+26	; 0x1a
     b46:	89 2f       	mov	r24, r25
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	80 5c       	subi	r24, 0xC0	; 192
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	82 1b       	sub	r24, r18
     b50:	91 09       	sbc	r25, r1
}
     b52:	8f 73       	andi	r24, 0x3F	; 63
     b54:	99 27       	eor	r25, r25
     b56:	08 95       	ret

00000b58 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     b58:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b5a:	91 8d       	ldd	r25, Z+25	; 0x19
     b5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b5e:	98 17       	cp	r25, r24
     b60:	31 f0       	breq	.+12     	; 0xb6e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b62:	82 8d       	ldd	r24, Z+26	; 0x1a
     b64:	e8 0f       	add	r30, r24
     b66:	f1 1d       	adc	r31, r1
     b68:	85 8d       	ldd	r24, Z+29	; 0x1d
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b72:	08 95       	ret

00000b74 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     b74:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b76:	91 8d       	ldd	r25, Z+25	; 0x19
     b78:	82 8d       	ldd	r24, Z+26	; 0x1a
     b7a:	98 17       	cp	r25, r24
     b7c:	61 f0       	breq	.+24     	; 0xb96 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b80:	df 01       	movw	r26, r30
     b82:	a8 0f       	add	r26, r24
     b84:	b1 1d       	adc	r27, r1
     b86:	5d 96       	adiw	r26, 0x1d	; 29
     b88:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b8a:	92 8d       	ldd	r25, Z+26	; 0x1a
     b8c:	9f 5f       	subi	r25, 0xFF	; 255
     b8e:	9f 73       	andi	r25, 0x3F	; 63
     b90:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b9a:	08 95       	ret

00000b9c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     b9c:	fc 01       	movw	r30, r24
     b9e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     ba0:	44 8d       	ldd	r20, Z+28	; 0x1c
     ba2:	25 2f       	mov	r18, r21
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	84 2f       	mov	r24, r20
     ba8:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	54 17       	cp	r21, r20
     bb0:	10 f0       	brcs	.+4      	; 0xbb6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     bb2:	cf 96       	adiw	r24, 0x3f	; 63
     bb4:	08 95       	ret
  return tail - head - 1;
     bb6:	01 97       	sbiw	r24, 0x01	; 1
}
     bb8:	08 95       	ret

00000bba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bba:	8d e2       	ldi	r24, 0x2D	; 45
     bbc:	97 e0       	ldi	r25, 0x07	; 7
     bbe:	89 2b       	or	r24, r25
     bc0:	49 f0       	breq	.+18     	; 0xbd4 <_Z14serialEventRunv+0x1a>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	89 2b       	or	r24, r25
     bc8:	29 f0       	breq	.+10     	; 0xbd4 <_Z14serialEventRunv+0x1a>
     bca:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_Z17Serial0_availablev>
     bce:	81 11       	cpse	r24, r1
     bd0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     bd4:	08 95       	ret

00000bd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     bd6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     bd8:	84 8d       	ldd	r24, Z+28	; 0x1c
     bda:	df 01       	movw	r26, r30
     bdc:	a8 0f       	add	r26, r24
     bde:	b1 1d       	adc	r27, r1
     be0:	a3 5a       	subi	r26, 0xA3	; 163
     be2:	bf 4f       	sbci	r27, 0xFF	; 255
     be4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     be6:	84 8d       	ldd	r24, Z+28	; 0x1c
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	8f 73       	andi	r24, 0x3F	; 63
     bee:	99 27       	eor	r25, r25
     bf0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     bf2:	a6 89       	ldd	r26, Z+22	; 0x16
     bf4:	b7 89       	ldd	r27, Z+23	; 0x17
     bf6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     bf8:	a0 89       	ldd	r26, Z+16	; 0x10
     bfa:	b1 89       	ldd	r27, Z+17	; 0x11
     bfc:	8c 91       	ld	r24, X
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     c02:	93 8d       	ldd	r25, Z+27	; 0x1b
     c04:	84 8d       	ldd	r24, Z+28	; 0x1c
     c06:	98 13       	cpse	r25, r24
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c0a:	02 88       	ldd	r0, Z+18	; 0x12
     c0c:	f3 89       	ldd	r31, Z+19	; 0x13
     c0e:	e0 2d       	mov	r30, r0
     c10:	80 81       	ld	r24, Z
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	80 83       	st	Z, r24
     c16:	08 95       	ret

00000c18 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	ec 01       	movw	r28, r24
  _written = true;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c2e:	98 13       	cpse	r25, r24
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <_ZN14HardwareSerial5writeEh+0x24>
     c32:	e8 89       	ldd	r30, Y+16	; 0x10
     c34:	f9 89       	ldd	r31, Y+17	; 0x11
     c36:	80 81       	ld	r24, Z
     c38:	85 fd       	sbrc	r24, 5
     c3a:	24 c0       	rjmp	.+72     	; 0xc84 <_ZN14HardwareSerial5writeEh+0x6c>
     c3c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c3e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	0f 73       	andi	r16, 0x3F	; 63
     c48:	11 27       	eor	r17, r17
     c4a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c4e:	e8 12       	cpse	r14, r24
     c50:	0c c0       	rjmp	.+24     	; 0xc6a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	07 fc       	sbrc	r0, 7
     c56:	fa cf       	rjmp	.-12     	; 0xc4c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c58:	e8 89       	ldd	r30, Y+16	; 0x10
     c5a:	f9 89       	ldd	r31, Y+17	; 0x11
     c5c:	80 81       	ld	r24, Z
     c5e:	85 ff       	sbrs	r24, 5
     c60:	f5 cf       	rjmp	.-22     	; 0xc4c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c68:	f1 cf       	rjmp	.-30     	; 0xc4c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c6c:	fe 01       	movw	r30, r28
     c6e:	e8 0f       	add	r30, r24
     c70:	f1 1d       	adc	r31, r1
     c72:	e3 5a       	subi	r30, 0xA3	; 163
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     c78:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     c7a:	ea 89       	ldd	r30, Y+18	; 0x12
     c7c:	fb 89       	ldd	r31, Y+19	; 0x13
     c7e:	80 81       	ld	r24, Z
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     c84:	ee 89       	ldd	r30, Y+22	; 0x16
     c86:	ff 89       	ldd	r31, Y+23	; 0x17
     c88:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     c8a:	e8 89       	ldd	r30, Y+16	; 0x10
     c8c:	f9 89       	ldd	r31, Y+17	; 0x11
     c8e:	80 81       	ld	r24, Z
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     cac:	88 8d       	ldd	r24, Y+24	; 0x18
     cae:	88 23       	and	r24, r24
     cb0:	c9 f0       	breq	.+50     	; 0xce4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     cb2:	ea 89       	ldd	r30, Y+18	; 0x12
     cb4:	fb 89       	ldd	r31, Y+19	; 0x13
     cb6:	80 81       	ld	r24, Z
     cb8:	85 fd       	sbrc	r24, 5
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <_ZN14HardwareSerial5flushEv+0x20>
     cbc:	a8 89       	ldd	r26, Y+16	; 0x10
     cbe:	b9 89       	ldd	r27, Y+17	; 0x11
     cc0:	8c 91       	ld	r24, X
     cc2:	86 fd       	sbrc	r24, 6
     cc4:	0f c0       	rjmp	.+30     	; 0xce4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	07 fc       	sbrc	r0, 7
     cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
     ccc:	80 81       	ld	r24, Z
     cce:	85 ff       	sbrs	r24, 5
     cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     cd2:	a8 89       	ldd	r26, Y+16	; 0x10
     cd4:	b9 89       	ldd	r27, Y+17	; 0x11
     cd6:	8c 91       	ld	r24, X
     cd8:	85 ff       	sbrs	r24, 5
     cda:	ed cf       	rjmp	.-38     	; 0xcb6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ce2:	e7 cf       	rjmp	.-50     	; 0xcb2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	6a 01       	movw	r12, r20
     cfc:	7b 01       	movw	r14, r22
     cfe:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d00:	60 e8       	ldi	r22, 0x80	; 128
     d02:	74 e8       	ldi	r23, 0x84	; 132
     d04:	8e e1       	ldi	r24, 0x1E	; 30
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__udivmodsi4>
     d10:	da 01       	movw	r26, r20
     d12:	c9 01       	movw	r24, r18
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	a1 09       	sbc	r26, r1
     d18:	b1 09       	sbc	r27, r1
     d1a:	b6 95       	lsr	r27
     d1c:	a7 95       	ror	r26
     d1e:	97 95       	ror	r25
     d20:	87 95       	ror	r24
     d22:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
     d24:	e8 89       	ldd	r30, Y+16	; 0x10
     d26:	f9 89       	ldd	r31, Y+17	; 0x11
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d2c:	21 15       	cp	r18, r1
     d2e:	80 e1       	ldi	r24, 0x10	; 16
     d30:	38 07       	cpc	r19, r24
     d32:	a8 f0       	brcs	.+42     	; 0xd5e <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
     d34:	e8 89       	ldd	r30, Y+16	; 0x10
     d36:	f9 89       	ldd	r31, Y+17	; 0x11
     d38:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d3a:	60 e4       	ldi	r22, 0x40	; 64
     d3c:	72 e4       	ldi	r23, 0x42	; 66
     d3e:	8f e0       	ldi	r24, 0x0F	; 15
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a7 01       	movw	r20, r14
     d44:	96 01       	movw	r18, r12
     d46:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__udivmodsi4>
     d4a:	da 01       	movw	r26, r20
     d4c:	c9 01       	movw	r24, r18
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	a1 09       	sbc	r26, r1
     d52:	b1 09       	sbc	r27, r1
     d54:	b6 95       	lsr	r27
     d56:	a7 95       	ror	r26
     d58:	97 95       	ror	r25
     d5a:	87 95       	ror	r24
     d5c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d5e:	ec 85       	ldd	r30, Y+12	; 0x0c
     d60:	fd 85       	ldd	r31, Y+13	; 0x0d
     d62:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     d64:	ee 85       	ldd	r30, Y+14	; 0x0e
     d66:	ff 85       	ldd	r31, Y+15	; 0x0f
     d68:	20 83       	st	Z, r18

  _written = false;
     d6a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     d6c:	ec 89       	ldd	r30, Y+20	; 0x14
     d6e:	fd 89       	ldd	r31, Y+21	; 0x15
     d70:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     d72:	ea 89       	ldd	r30, Y+18	; 0x12
     d74:	fb 89       	ldd	r31, Y+19	; 0x13
     d76:	80 81       	ld	r24, Z
     d78:	80 61       	ori	r24, 0x10	; 16
     d7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     d7c:	ea 89       	ldd	r30, Y+18	; 0x12
     d7e:	fb 89       	ldd	r31, Y+19	; 0x13
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     d86:	ea 89       	ldd	r30, Y+18	; 0x12
     d88:	fb 89       	ldd	r31, Y+19	; 0x13
     d8a:	80 81       	ld	r24, Z
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     d90:	ea 89       	ldd	r30, Y+18	; 0x12
     d92:	fb 89       	ldd	r31, Y+19	; 0x13
     d94:	80 81       	ld	r24, Z
     d96:	8f 7d       	andi	r24, 0xDF	; 223
     d98:	80 83       	st	Z, r24
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dbe:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Serial+0x10>
     dc2:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <Serial+0x11>
     dc6:	80 81       	ld	r24, Z
     dc8:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Serial+0x16>
     dcc:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Serial+0x17>
     dd0:	82 fd       	sbrc	r24, 2
     dd2:	12 c0       	rjmp	.+36     	; 0xdf8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     dd4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     dd6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <Serial+0x19>
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     dde:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <Serial+0x1a>
     de2:	82 17       	cp	r24, r18
     de4:	51 f0       	breq	.+20     	; 0xdfa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     de6:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <Serial+0x19>
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	ec 57       	subi	r30, 0x7C	; 124
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     df2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <Serial+0x19>
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     df8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e30:	84 e8       	ldi	r24, 0x84	; 132
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     e5a:	84 e8       	ldi	r24, 0x84	; 132
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN14HardwareSerial9availableEv>
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	89 2b       	or	r24, r25
     e66:	09 f4       	brne	.+2      	; 0xe6a <_Z17Serial0_availablev+0x10>
     e68:	20 e0       	ldi	r18, 0x00	; 0
}
     e6a:	82 2f       	mov	r24, r18
     e6c:	08 95       	ret

00000e6e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e6e:	e4 e8       	ldi	r30, 0x84	; 132
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	13 82       	std	Z+3, r1	; 0x03
     e74:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     e76:	88 ee       	ldi	r24, 0xE8	; 232
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	84 83       	std	Z+4, r24	; 0x04
     e80:	95 83       	std	Z+5, r25	; 0x05
     e82:	a6 83       	std	Z+6, r26	; 0x06
     e84:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e86:	89 e0       	ldi	r24, 0x09	; 9
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	85 ec       	ldi	r24, 0xC5	; 197
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	95 87       	std	Z+13, r25	; 0x0d
     e94:	84 87       	std	Z+12, r24	; 0x0c
     e96:	84 ec       	ldi	r24, 0xC4	; 196
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	97 87       	std	Z+15, r25	; 0x0f
     e9c:	86 87       	std	Z+14, r24	; 0x0e
     e9e:	80 ec       	ldi	r24, 0xC0	; 192
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	91 8b       	std	Z+17, r25	; 0x11
     ea4:	80 8b       	std	Z+16, r24	; 0x10
     ea6:	81 ec       	ldi	r24, 0xC1	; 193
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	93 8b       	std	Z+19, r25	; 0x13
     eac:	82 8b       	std	Z+18, r24	; 0x12
     eae:	82 ec       	ldi	r24, 0xC2	; 194
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	95 8b       	std	Z+21, r25	; 0x15
     eb4:	84 8b       	std	Z+20, r24	; 0x14
     eb6:	86 ec       	ldi	r24, 0xC6	; 198
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	97 8b       	std	Z+23, r25	; 0x17
     ebc:	86 8b       	std	Z+22, r24	; 0x16
     ebe:	11 8e       	std	Z+25, r1	; 0x19
     ec0:	12 8e       	std	Z+26, r1	; 0x1a
     ec2:	13 8e       	std	Z+27, r1	; 0x1b
     ec4:	14 8e       	std	Z+28, r1	; 0x1c
     ec6:	08 95       	ret

00000ec8 <initVariant>:
     ec8:	08 95       	ret

00000eca <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     eca:	0e 94 5d 09 	call	0x12ba	; 0x12ba <init>

	initVariant();
     ece:	0e 94 64 07 	call	0xec8	; 0xec8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ed2:	0e 94 bf 02 	call	0x57e	; 0x57e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ed6:	cd ed       	ldi	r28, 0xDD	; 221
     ed8:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     eda:	0e 94 dd 02 	call	0x5ba	; 0x5ba <loop>
		if (serialEventRun) serialEventRun();
     ede:	20 97       	sbiw	r28, 0x00	; 0
     ee0:	e1 f3       	breq	.-8      	; 0xeda <main+0x10>
     ee2:	0e 94 dd 05 	call	0xbba	; 0xbba <_Z14serialEventRunv>
     ee6:	f9 cf       	rjmp	.-14     	; 0xeda <main+0x10>

00000ee8 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	6c 01       	movw	r12, r24
     efa:	7a 01       	movw	r14, r20
     efc:	8b 01       	movw	r16, r22
     efe:	c0 e0       	ldi	r28, 0x00	; 0
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	ce 15       	cp	r28, r14
     f04:	df 05       	cpc	r29, r15
     f06:	81 f0       	breq	.+32     	; 0xf28 <_ZN5Print5writeEPKhj+0x40>
     f08:	d8 01       	movw	r26, r16
     f0a:	6d 91       	ld	r22, X+
     f0c:	8d 01       	movw	r16, r26
     f0e:	d6 01       	movw	r26, r12
     f10:	ed 91       	ld	r30, X+
     f12:	fc 91       	ld	r31, X
     f14:	01 90       	ld	r0, Z+
     f16:	f0 81       	ld	r31, Z
     f18:	e0 2d       	mov	r30, r0
     f1a:	c6 01       	movw	r24, r12
     f1c:	09 95       	icall
     f1e:	89 2b       	or	r24, r25
     f20:	11 f0       	breq	.+4      	; 0xf26 <_ZN5Print5writeEPKhj+0x3e>
     f22:	21 96       	adiw	r28, 0x01	; 1
     f24:	ee cf       	rjmp	.-36     	; 0xf02 <_ZN5Print5writeEPKhj+0x1a>
     f26:	7e 01       	movw	r14, r28
     f28:	c7 01       	movw	r24, r14
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	08 95       	ret

00000f3c <_ZN5Print5writeEPKc>:
     f3c:	61 15       	cp	r22, r1
     f3e:	71 05       	cpc	r23, r1
     f40:	79 f0       	breq	.+30     	; 0xf60 <_ZN5Print5writeEPKc+0x24>
     f42:	fb 01       	movw	r30, r22
     f44:	01 90       	ld	r0, Z+
     f46:	00 20       	and	r0, r0
     f48:	e9 f7       	brne	.-6      	; 0xf44 <_ZN5Print5writeEPKc+0x8>
     f4a:	31 97       	sbiw	r30, 0x01	; 1
     f4c:	af 01       	movw	r20, r30
     f4e:	46 1b       	sub	r20, r22
     f50:	57 0b       	sbc	r21, r23
     f52:	dc 01       	movw	r26, r24
     f54:	ed 91       	ld	r30, X+
     f56:	fc 91       	ld	r31, X
     f58:	02 80       	ldd	r0, Z+2	; 0x02
     f5a:	f3 81       	ldd	r31, Z+3	; 0x03
     f5c:	e0 2d       	mov	r30, r0
     f5e:	09 94       	ijmp
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	08 95       	ret

00000f66 <_ZN5Print5printEc>:
     f66:	dc 01       	movw	r26, r24
     f68:	ed 91       	ld	r30, X+
     f6a:	fc 91       	ld	r31, X
     f6c:	01 90       	ld	r0, Z+
     f6e:	f0 81       	ld	r31, Z
     f70:	e0 2d       	mov	r30, r0
     f72:	09 94       	ijmp

00000f74 <_ZN5Print7printlnEv>:
     f74:	67 e1       	ldi	r22, 0x17	; 23
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_ZN5Print5writeEPKc>

00000f7c <_ZN5Print11printNumberEmh>:
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	a1 97       	sbiw	r28, 0x21	; 33
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	7c 01       	movw	r14, r24
     fa2:	fa 01       	movw	r30, r20
     fa4:	cb 01       	movw	r24, r22
     fa6:	19 a2       	std	Y+33, r1	; 0x21
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	08 f4       	brcc	.+2      	; 0xfae <_ZN5Print11printNumberEmh+0x32>
     fac:	2a e0       	ldi	r18, 0x0A	; 10
     fae:	8e 01       	movw	r16, r28
     fb0:	0f 5d       	subi	r16, 0xDF	; 223
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	82 2e       	mov	r8, r18
     fb6:	91 2c       	mov	r9, r1
     fb8:	a1 2c       	mov	r10, r1
     fba:	b1 2c       	mov	r11, r1
     fbc:	bf 01       	movw	r22, r30
     fbe:	a5 01       	movw	r20, r10
     fc0:	94 01       	movw	r18, r8
     fc2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__udivmodsi4>
     fc6:	f9 01       	movw	r30, r18
     fc8:	ca 01       	movw	r24, r20
     fca:	01 50       	subi	r16, 0x01	; 1
     fcc:	11 09       	sbc	r17, r1
     fce:	6a 30       	cpi	r22, 0x0A	; 10
     fd0:	10 f4       	brcc	.+4      	; 0xfd6 <_ZN5Print11printNumberEmh+0x5a>
     fd2:	60 5d       	subi	r22, 0xD0	; 208
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <_ZN5Print11printNumberEmh+0x5c>
     fd6:	69 5c       	subi	r22, 0xC9	; 201
     fd8:	d8 01       	movw	r26, r16
     fda:	6c 93       	st	X, r22
     fdc:	23 2b       	or	r18, r19
     fde:	24 2b       	or	r18, r20
     fe0:	25 2b       	or	r18, r21
     fe2:	61 f7       	brne	.-40     	; 0xfbc <_ZN5Print11printNumberEmh+0x40>
     fe4:	b8 01       	movw	r22, r16
     fe6:	c7 01       	movw	r24, r14
     fe8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN5Print5writeEPKc>
     fec:	a1 96       	adiw	r28, 0x21	; 33
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	08 95       	ret

0000100e <_ZN5Print5printEmi>:
    100e:	21 15       	cp	r18, r1
    1010:	31 05       	cpc	r19, r1
    1012:	41 f4       	brne	.+16     	; 0x1024 <_ZN5Print5printEmi+0x16>
    1014:	dc 01       	movw	r26, r24
    1016:	ed 91       	ld	r30, X+
    1018:	fc 91       	ld	r31, X
    101a:	01 90       	ld	r0, Z+
    101c:	f0 81       	ld	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	64 2f       	mov	r22, r20
    1022:	09 94       	ijmp
    1024:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_ZN5Print11printNumberEmh>

00001028 <_ZN5Print5printEji>:
    1028:	9a 01       	movw	r18, r20
    102a:	ab 01       	movw	r20, r22
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	0c 94 07 08 	jmp	0x100e	; 0x100e <_ZN5Print5printEmi>

00001034 <_ZN5Print10printFloatEdh>:
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	8c 01       	movw	r16, r24
    1050:	6a 01       	movw	r12, r20
    1052:	7b 01       	movw	r14, r22
    1054:	72 2e       	mov	r7, r18
    1056:	9a 01       	movw	r18, r20
    1058:	ab 01       	movw	r20, r22
    105a:	c7 01       	movw	r24, r14
    105c:	b6 01       	movw	r22, r12
    105e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__unordsf2>
    1062:	88 23       	and	r24, r24
    1064:	19 f0       	breq	.+6      	; 0x106c <_ZN5Print10printFloatEdh+0x38>
    1066:	6a e1       	ldi	r22, 0x1A	; 26
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	27 c0       	rjmp	.+78     	; 0x10ba <_ZN5Print10printFloatEdh+0x86>
    106c:	46 01       	movw	r8, r12
    106e:	57 01       	movw	r10, r14
    1070:	e8 94       	clt
    1072:	b7 f8       	bld	r11, 7
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	4f e7       	ldi	r20, 0x7F	; 127
    107a:	5f e7       	ldi	r21, 0x7F	; 127
    107c:	c5 01       	movw	r24, r10
    107e:	b4 01       	movw	r22, r8
    1080:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__unordsf2>
    1084:	81 11       	cpse	r24, r1
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <_ZN5Print10printFloatEdh+0x6e>
    1088:	2f ef       	ldi	r18, 0xFF	; 255
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	5f e7       	ldi	r21, 0x7F	; 127
    1090:	c5 01       	movw	r24, r10
    1092:	b4 01       	movw	r22, r8
    1094:	0e 94 43 0a 	call	0x1486	; 0x1486 <__cmpsf2>
    1098:	18 16       	cp	r1, r24
    109a:	1c f4       	brge	.+6      	; 0x10a2 <_ZN5Print10printFloatEdh+0x6e>
    109c:	6e e1       	ldi	r22, 0x1E	; 30
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <_ZN5Print10printFloatEdh+0x86>
    10a2:	2f ef       	ldi	r18, 0xFF	; 255
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	4f e7       	ldi	r20, 0x7F	; 127
    10a8:	5f e4       	ldi	r21, 0x4F	; 79
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__gesf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	94 f4       	brge	.+36     	; 0x10da <_ZN5Print10printFloatEdh+0xa6>
    10b6:	62 e2       	ldi	r22, 0x22	; 34
    10b8:	71 e0       	ldi	r23, 0x01	; 1
    10ba:	c8 01       	movw	r24, r16
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	7f 90       	pop	r7
    10d6:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_ZN5Print5writeEPKc>
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	3f ef       	ldi	r19, 0xFF	; 255
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	5f ec       	ldi	r21, 0xCF	; 207
    10e2:	c7 01       	movw	r24, r14
    10e4:	b6 01       	movw	r22, r12
    10e6:	0e 94 43 0a 	call	0x1486	; 0x1486 <__cmpsf2>
    10ea:	87 fd       	sbrc	r24, 7
    10ec:	e4 cf       	rjmp	.-56     	; 0x10b6 <_ZN5Print10printFloatEdh+0x82>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 43 0a 	call	0x1486	; 0x1486 <__cmpsf2>
    10fc:	87 ff       	sbrs	r24, 7
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <_ZN5Print10printFloatEdh+0xe0>
    1100:	6d e2       	ldi	r22, 0x2D	; 45
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEc>
    1108:	ec 01       	movw	r28, r24
    110a:	f7 fa       	bst	r15, 7
    110c:	f0 94       	com	r15
    110e:	f7 f8       	bld	r15, 7
    1110:	f0 94       	com	r15
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <_ZN5Print10printFloatEdh+0xe4>
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	d0 e0       	ldi	r29, 0x00	; 0
    1118:	b1 2c       	mov	r11, r1
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	9f e3       	ldi	r25, 0x3F	; 63
    1122:	7b 14       	cp	r7, r11
    1124:	41 f0       	breq	.+16     	; 0x1136 <_ZN5Print10printFloatEdh+0x102>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 a9 03 	call	0x752	; 0x752 <__divsf3>
    1132:	b3 94       	inc	r11
    1134:	f6 cf       	rjmp	.-20     	; 0x1122 <_ZN5Print10printFloatEdh+0xee>
    1136:	a7 01       	movw	r20, r14
    1138:	96 01       	movw	r18, r12
    113a:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3>
    113e:	6b 01       	movw	r12, r22
    1140:	7c 01       	movw	r14, r24
    1142:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
    1146:	4b 01       	movw	r8, r22
    1148:	5c 01       	movw	r10, r24
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	ab 01       	movw	r20, r22
    114e:	bc 01       	movw	r22, r24
    1150:	c8 01       	movw	r24, r16
    1152:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN5Print11printNumberEmh>
    1156:	c8 0f       	add	r28, r24
    1158:	d9 1f       	adc	r29, r25
    115a:	77 20       	and	r7, r7
    115c:	b9 f1       	breq	.+110    	; 0x11cc <_ZN5Print10printFloatEdh+0x198>
    115e:	c5 01       	movw	r24, r10
    1160:	b4 01       	movw	r22, r8
    1162:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 3c 03 	call	0x678	; 0x678 <__subsf3>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
    1176:	6e e2       	ldi	r22, 0x2E	; 46
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEc>
    117e:	c8 0f       	add	r28, r24
    1180:	d9 1f       	adc	r29, r25
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e2       	ldi	r20, 0x20	; 32
    1188:	51 e4       	ldi	r21, 0x41	; 65
    118a:	c7 01       	movw	r24, r14
    118c:	b6 01       	movw	r22, r12
    118e:	0e 94 33 05 	call	0xa66	; 0xa66 <__mulsf3>
    1192:	4b 01       	movw	r8, r22
    1194:	5c 01       	movw	r10, r24
    1196:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
    119a:	6b 01       	movw	r12, r22
    119c:	7c 01       	movw	r14, r24
    119e:	4a e0       	ldi	r20, 0x0A	; 10
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN5Print5printEji>
    11a8:	c8 0f       	add	r28, r24
    11aa:	d9 1f       	adc	r29, r25
    11ac:	b6 01       	movw	r22, r12
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	c5 01       	movw	r24, r10
    11bc:	b4 01       	movw	r22, r8
    11be:	0e 94 3c 03 	call	0x678	; 0x678 <__subsf3>
    11c2:	6b 01       	movw	r12, r22
    11c4:	7c 01       	movw	r14, r24
    11c6:	7a 94       	dec	r7
    11c8:	71 10       	cpse	r7, r1
    11ca:	db cf       	rjmp	.-74     	; 0x1182 <_ZN5Print10printFloatEdh+0x14e>
    11cc:	ce 01       	movw	r24, r28
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	9f 90       	pop	r9
    11e4:	8f 90       	pop	r8
    11e6:	7f 90       	pop	r7
    11e8:	08 95       	ret

000011ea <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    11f4:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print10printFloatEdh>
    11f8:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN5Print7printlnEv>
  return n;
}
    1200:	80 0f       	add	r24, r16
    1202:	91 1f       	adc	r25, r17
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	08 95       	ret

0000120e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timer0_millis>
    1228:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timer0_millis+0x1>
    122c:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timer0_millis+0x2>
    1230:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timer0_millis+0x3>
    1234:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <timer0_fract>
    1238:	26 e0       	ldi	r18, 0x06	; 6
    123a:	23 0f       	add	r18, r19
    123c:	2d 37       	cpi	r18, 0x7D	; 125
    123e:	20 f4       	brcc	.+8      	; 0x1248 <__vector_16+0x3a>
    1240:	02 96       	adiw	r24, 0x02	; 2
    1242:	a1 1d       	adc	r26, r1
    1244:	b1 1d       	adc	r27, r1
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <__vector_16+0x44>
    1248:	29 e8       	ldi	r18, 0x89	; 137
    124a:	23 0f       	add	r18, r19
    124c:	03 96       	adiw	r24, 0x03	; 3
    124e:	a1 1d       	adc	r26, r1
    1250:	b1 1d       	adc	r27, r1
    1252:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <timer0_fract>
    1256:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <timer0_millis>
    125a:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <timer0_millis+0x1>
    125e:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <timer0_millis+0x2>
    1262:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <timer0_millis+0x3>
    1266:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <timer0_overflow_count>
    126a:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <timer0_overflow_count+0x1>
    126e:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <timer0_overflow_count+0x2>
    1272:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <timer0_overflow_count+0x3>
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	a1 1d       	adc	r26, r1
    127a:	b1 1d       	adc	r27, r1
    127c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <timer0_overflow_count>
    1280:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <timer0_overflow_count+0x1>
    1284:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <timer0_overflow_count+0x2>
    1288:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <timer0_overflow_count+0x3>
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <millis>:
    12a2:	2f b7       	in	r18, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <timer0_millis>
    12aa:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <timer0_millis+0x1>
    12ae:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <timer0_millis+0x2>
    12b2:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <timer0_millis+0x3>
    12b6:	2f bf       	out	0x3f, r18	; 63
    12b8:	08 95       	ret

000012ba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    12ba:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    12bc:	84 b5       	in	r24, 0x24	; 36
    12be:	82 60       	ori	r24, 0x02	; 2
    12c0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12c2:	84 b5       	in	r24, 0x24	; 36
    12c4:	81 60       	ori	r24, 0x01	; 1
    12c6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12c8:	85 b5       	in	r24, 0x25	; 37
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12ce:	85 b5       	in	r24, 0x25	; 37
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12d4:	ee e6       	ldi	r30, 0x6E	; 110
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12de:	e1 e8       	ldi	r30, 0x81	; 129
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12e4:	80 81       	ld	r24, Z
    12e6:	82 60       	ori	r24, 0x02	; 2
    12e8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12ea:	80 81       	ld	r24, Z
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12f0:	e0 e8       	ldi	r30, 0x80	; 128
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12fa:	e1 eb       	ldi	r30, 0xB1	; 177
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	84 60       	ori	r24, 0x04	; 4
    1302:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1304:	e0 eb       	ldi	r30, 0xB0	; 176
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    130e:	ea e7       	ldi	r30, 0x7A	; 122
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	84 60       	ori	r24, 0x04	; 4
    1316:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1318:	80 81       	ld	r24, Z
    131a:	82 60       	ori	r24, 0x02	; 2
    131c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    131e:	80 81       	ld	r24, Z
    1320:	8e 7f       	andi	r24, 0xFE	; 254
    1322:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1324:	80 81       	ld	r24, Z
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    132a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    132e:	08 95       	ret

00001330 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1330:	8e 30       	cpi	r24, 0x0E	; 14
    1332:	08 f0       	brcs	.+2      	; 0x1336 <analogRead+0x6>
    1334:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1336:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <analog_reference>
    133a:	90 e4       	ldi	r25, 0x40	; 64
    133c:	29 9f       	mul	r18, r25
    133e:	90 01       	movw	r18, r0
    1340:	11 24       	eor	r1, r1
    1342:	87 70       	andi	r24, 0x07	; 7
    1344:	82 2b       	or	r24, r18
    1346:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    134a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1354:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1358:	86 fd       	sbrc	r24, 6
    135a:	fc cf       	rjmp	.-8      	; 0x1354 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    135c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1360:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1364:	90 e0       	ldi	r25, 0x00	; 0
}
    1366:	92 2b       	or	r25, r18
    1368:	08 95       	ret

0000136a <turnOffPWM>:
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
}
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	81 f0       	breq	.+32     	; 0x138e <turnOffPWM+0x24>
    136e:	28 f4       	brcc	.+10     	; 0x137a <turnOffPWM+0x10>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	99 f0       	breq	.+38     	; 0x139a <turnOffPWM+0x30>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <turnOffPWM+0x36>
    1378:	08 95       	ret
    137a:	87 30       	cpi	r24, 0x07	; 7
    137c:	a9 f0       	breq	.+42     	; 0x13a8 <turnOffPWM+0x3e>
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	b9 f0       	breq	.+46     	; 0x13b0 <turnOffPWM+0x46>
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	d1 f4       	brne	.+52     	; 0x13ba <turnOffPWM+0x50>
    1386:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    138a:	8f 7d       	andi	r24, 0xDF	; 223
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <turnOffPWM+0x2a>
    138e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1392:	8f 77       	andi	r24, 0x7F	; 127
    1394:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1398:	08 95       	ret
    139a:	84 b5       	in	r24, 0x24	; 36
    139c:	8f 77       	andi	r24, 0x7F	; 127
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <turnOffPWM+0x3a>
    13a0:	84 b5       	in	r24, 0x24	; 36
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	84 bd       	out	0x24, r24	; 36
    13a6:	08 95       	ret
    13a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <turnOffPWM+0x4c>
    13b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13b4:	8f 7d       	andi	r24, 0xDF	; 223
    13b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    13ba:	08 95       	ret

000013bc <pinMode>:
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	e4 58       	subi	r30, 0x84	; 132
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	24 91       	lpm	r18, Z
    13ca:	fc 01       	movw	r30, r24
    13cc:	e0 57       	subi	r30, 0x70	; 112
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	84 91       	lpm	r24, Z
    13d2:	88 23       	and	r24, r24
    13d4:	61 f1       	breq	.+88     	; 0x142e <pinMode+0x72>
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	fc 01       	movw	r30, r24
    13de:	e8 54       	subi	r30, 0x48	; 72
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	c5 91       	lpm	r28, Z+
    13e4:	d4 91       	lpm	r29, Z
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 55       	subi	r30, 0x52	; 82
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	a5 91       	lpm	r26, Z+
    13ee:	b4 91       	lpm	r27, Z
    13f0:	61 11       	cpse	r22, r1
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <pinMode+0x4a>
    13f4:	9f b7       	in	r25, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	88 81       	ld	r24, Y
    13fa:	20 95       	com	r18
    13fc:	82 23       	and	r24, r18
    13fe:	88 83       	st	Y, r24
    1400:	ec 91       	ld	r30, X
    1402:	2e 23       	and	r18, r30
    1404:	0b c0       	rjmp	.+22     	; 0x141c <pinMode+0x60>
    1406:	62 30       	cpi	r22, 0x02	; 2
    1408:	61 f4       	brne	.+24     	; 0x1422 <pinMode+0x66>
    140a:	9f b7       	in	r25, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	88 81       	ld	r24, Y
    1410:	32 2f       	mov	r19, r18
    1412:	30 95       	com	r19
    1414:	83 23       	and	r24, r19
    1416:	88 83       	st	Y, r24
    1418:	ec 91       	ld	r30, X
    141a:	2e 2b       	or	r18, r30
    141c:	2c 93       	st	X, r18
    141e:	9f bf       	out	0x3f, r25	; 63
    1420:	06 c0       	rjmp	.+12     	; 0x142e <pinMode+0x72>
    1422:	8f b7       	in	r24, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	e8 81       	ld	r30, Y
    1428:	2e 2b       	or	r18, r30
    142a:	28 83       	st	Y, r18
    142c:	8f bf       	out	0x3f, r24	; 63
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	e8 59       	subi	r30, 0x98	; 152
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1444:	f9 01       	movw	r30, r18
    1446:	e4 58       	subi	r30, 0x84	; 132
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    144c:	f9 01       	movw	r30, r18
    144e:	e0 57       	subi	r30, 0x70	; 112
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1454:	cc 23       	and	r28, r28
    1456:	91 f0       	breq	.+36     	; 0x147c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1458:	81 11       	cpse	r24, r1
    145a:	0e 94 b5 09 	call	0x136a	; 0x136a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    145e:	ec 2f       	mov	r30, r28
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	ec 55       	subi	r30, 0x5C	; 92
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	a5 91       	lpm	r26, Z+
    146c:	b4 91       	lpm	r27, Z
    146e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1470:	ed 23       	and	r30, r29
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	21 f4       	brne	.+8      	; 0x1480 <digitalRead+0x4c>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <digitalRead+0x4c>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <__cmpsf2>:
    1486:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_cmp>
    148a:	08 f4       	brcc	.+2      	; 0x148e <__cmpsf2+0x8>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	08 95       	ret

00001490 <__fp_cmp>:
    1490:	99 0f       	add	r25, r25
    1492:	00 08       	sbc	r0, r0
    1494:	55 0f       	add	r21, r21
    1496:	aa 0b       	sbc	r26, r26
    1498:	e0 e8       	ldi	r30, 0x80	; 128
    149a:	fe ef       	ldi	r31, 0xFE	; 254
    149c:	16 16       	cp	r1, r22
    149e:	17 06       	cpc	r1, r23
    14a0:	e8 07       	cpc	r30, r24
    14a2:	f9 07       	cpc	r31, r25
    14a4:	c0 f0       	brcs	.+48     	; 0x14d6 <__fp_cmp+0x46>
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	e4 07       	cpc	r30, r20
    14ac:	f5 07       	cpc	r31, r21
    14ae:	98 f0       	brcs	.+38     	; 0x14d6 <__fp_cmp+0x46>
    14b0:	62 1b       	sub	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	95 0b       	sbc	r25, r21
    14b8:	39 f4       	brne	.+14     	; 0x14c8 <__fp_cmp+0x38>
    14ba:	0a 26       	eor	r0, r26
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <__fp_cmp+0x46>
    14be:	23 2b       	or	r18, r19
    14c0:	24 2b       	or	r18, r20
    14c2:	25 2b       	or	r18, r21
    14c4:	21 f4       	brne	.+8      	; 0x14ce <__fp_cmp+0x3e>
    14c6:	08 95       	ret
    14c8:	0a 26       	eor	r0, r26
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__fp_cmp+0x3e>
    14cc:	a1 40       	sbci	r26, 0x01	; 1
    14ce:	a6 95       	lsr	r26
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	81 1d       	adc	r24, r1
    14d4:	81 1d       	adc	r24, r1
    14d6:	08 95       	ret

000014d8 <__gesf2>:
    14d8:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_cmp>
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <__gesf2+0x8>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	08 95       	ret

000014e2 <__unordsf2>:
    14e2:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_cmp>
    14e6:	88 0b       	sbc	r24, r24
    14e8:	99 0b       	sbc	r25, r25
    14ea:	08 95       	ret

000014ec <__udivmodsi4>:
    14ec:	a1 e2       	ldi	r26, 0x21	; 33
    14ee:	1a 2e       	mov	r1, r26
    14f0:	aa 1b       	sub	r26, r26
    14f2:	bb 1b       	sub	r27, r27
    14f4:	fd 01       	movw	r30, r26
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <__udivmodsi4_ep>

000014f8 <__udivmodsi4_loop>:
    14f8:	aa 1f       	adc	r26, r26
    14fa:	bb 1f       	adc	r27, r27
    14fc:	ee 1f       	adc	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	a2 17       	cp	r26, r18
    1502:	b3 07       	cpc	r27, r19
    1504:	e4 07       	cpc	r30, r20
    1506:	f5 07       	cpc	r31, r21
    1508:	20 f0       	brcs	.+8      	; 0x1512 <__udivmodsi4_ep>
    150a:	a2 1b       	sub	r26, r18
    150c:	b3 0b       	sbc	r27, r19
    150e:	e4 0b       	sbc	r30, r20
    1510:	f5 0b       	sbc	r31, r21

00001512 <__udivmodsi4_ep>:
    1512:	66 1f       	adc	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	1a 94       	dec	r1
    151c:	69 f7       	brne	.-38     	; 0x14f8 <__udivmodsi4_loop>
    151e:	60 95       	com	r22
    1520:	70 95       	com	r23
    1522:	80 95       	com	r24
    1524:	90 95       	com	r25
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	bd 01       	movw	r22, r26
    152c:	cf 01       	movw	r24, r30
    152e:	08 95       	ret

00001530 <__cmpdi2_s8>:
    1530:	00 24       	eor	r0, r0
    1532:	a7 fd       	sbrc	r26, 7
    1534:	00 94       	com	r0
    1536:	2a 17       	cp	r18, r26
    1538:	30 05       	cpc	r19, r0
    153a:	40 05       	cpc	r20, r0
    153c:	50 05       	cpc	r21, r0
    153e:	60 05       	cpc	r22, r0
    1540:	70 05       	cpc	r23, r0
    1542:	80 05       	cpc	r24, r0
    1544:	90 05       	cpc	r25, r0
    1546:	08 95       	ret

00001548 <__tablejump2__>:
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	05 90       	lpm	r0, Z+
    154e:	f4 91       	lpm	r31, Z
    1550:	e0 2d       	mov	r30, r0
    1552:	09 94       	ijmp

00001554 <_exit>:
    1554:	f8 94       	cli

00001556 <__stop_program>:
    1556:	ff cf       	rjmp	.-2      	; 0x1556 <__stop_program>
